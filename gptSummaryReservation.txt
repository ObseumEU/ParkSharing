--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.css
--------------------------------------------------
/* App.css */

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');

:root {
  /* Original Colors */
  --orange: #ff4f40;
  --indigo: #635dff;
  --white: #fff;
  --light-aluminium: #eaecee;
  --aluminium: #bdc4cf;
  --dark-aluminium: #2a2e35;
  --black: #000000;
  --yellow: #ebca40;
  --mandarine: #ff7f38;
  --pink: #ff44dd;
  --blue: #3885ff;
  --aqua: #3ec6eb;
  --emerald: #1bc99f;

  /* Gradients */
  --pink-yellow-gradient: linear-gradient(153.07deg, var(--pink) -2.47%, var(--yellow) 102.78%);

  /* Fonts */
  --font-primary: 'Roboto', sans-serif;
}

body, html {
  height: 100%;
  margin: 0;
  background-color: var(--black);
  font-family: var(--font-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  height: 100%;
  width: 100%;
}

.App {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chat-container {
  width: 100%;
  max-width: 600px;
  height: 600px;
  background: var(--pink-yellow-gradient);
  display: flex;
  flex-direction: column;
  border-radius: 10px;
  overflow: hidden;
  -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
}

.chat-header {
  background-color: rgba(0, 0, 0, 0.7);
  color: var(--white);
  text-align: center;
  padding: 15px;
}

.chat-header h2 {
  margin: 0;
  font-size: 20px;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}

.messages-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  flex-grow: 1;
  padding: 10px 15px;
}

.message {
  margin-bottom: 8px;
  display: flex;
  animation: fadeIn 0.3s forwards;
}

.message.user-message {
  justify-content: flex-end;
}

.message.bot-message {
  justify-content: flex-start;
}

.message .message-content {
  background-color: rgba(255, 255, 255, 0.85);
  color: var(--black);
  padding: 8px 12px;
  border-radius: 15px;
  max-width: 80%;
  font-size: 16px;
  line-height: 1.4;
  word-break: break-word; /* Ensure text wraps on small screens */
}

.message.user-message .message-content {
  background-color: var(--blue);
  color: var(--white);
}

.message.typing .message-content {
  background-color: transparent;
  padding: 0;
}

.typing-indicator {
  display: flex;
  align-items: center;
  height: 20px;
}

.typing-indicator span {
  display: inline-block;
  width: 6px;
  height: 6px;
  margin: 0 2px;
  background-color: rgba(255, 255, 255, 0.85);
  border-radius: 50%;
  animation: bounce 1s infinite;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes bounce {
  0%, 60%, 100% {
    transform: translateY(0);
  }
  30% {
    transform: translateY(-6px);
  }
}

.chat-input {
  display: flex;
  align-items: center;
  padding: 10px 15px;
  background-color: rgba(0, 0, 0, 0.7);
}

.chat-input input {
  flex: 1;
  padding: 8px 12px;
  font-size: 16px;
  border: none;
  border-radius: 20px;
  outline: none;
  margin-right: 10px;
  background-color: var(--white);
  color: var(--black);
}

.chat-input input::placeholder {
  color: #999999;
}

.chat-input button {
  padding: 0;
  background-color: transparent;
  border: none;
  cursor: pointer;
}

.chat-input button .send-icon {
  width: 24px;
  height: 24px;
  fill: var(--white);
}

.chat-input input:disabled {
  background-color: #f0f0f0;
}

.chat-input button:disabled .send-icon {
  fill: #cccccc;
}

.chat-input input:disabled,
.chat-input button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Scrollbar Styles */
.chat-messages {
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.5) transparent;
}

.chat-messages::-webkit-scrollbar {
  width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
  background: transparent;
}

.chat-messages::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.5);
  border-radius: 10px;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media only screen and (max-width: 600px) {
  .chat-container {
    max-width: 100%;
    height: 100%;
    border-radius: 0;
  }

  .chat-header h2 {
    font-size: 18px;
  }

  .message .message-content {
    font-size: 15px;
  }

  .chat-input input {
    font-size: 15px;
  }
}


/* Markdown Content Styling */
.message .message-content h1,
.message .message-content h2,
.message .message-content h3,
.message .message-content h4,
.message .message-content h5,
.message .message-content h6 {
  margin: 0;
  font-weight: bold;
}

.message .message-content p {
  margin: 0;
}

.message .message-content em {
  font-style: italic;
}

.message .message-content strong {
  font-weight: bold;
}

.message .message-content a {
  color: var(--blue);
  text-decoration: underline;
}

.message .message-content ul,
.message .message-content ol {
  padding-left: 20px;
  margin: 0;
}

.message .message-content li {
  margin-bottom: 5px;
}

.message .message-content code {
  background-color: rgba(0, 0, 0, 0.05);
  padding: 2px 4px;
  border-radius: 4px;
  font-family: monospace;
}

.message .message-content pre {
  background-color: rgba(0, 0, 0, 0.05);
  padding: 8px;
  border-radius: 4px;
  overflow-x: auto;
}

/* Ensure images fit within the message bubble */
.message .message-content img {
  max-width: 100%;
  height: auto;
  border-radius: 5px;
}
--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/index.css
--------------------------------------------------
/* ./src/ParkSharing.Reservation.Client/src/index.css */

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');

body, html {
  height: 100%;
  margin: 0;
  background-color: black;
}

#root {
  height: 100%;
  width: 100%;
}

.App {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.main-chat-container {
  width: 100%;
  height: 100%;
  font-family: Roboto, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: black;
}

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.js
--------------------------------------------------
// App.js

import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import './App.css';

const App = () => {
  const initialBotMessage =
    '👋 Vítejte! Rezervujte si parkování snadno. Napište den a čas, kdy chcete místo, např.: 🗓️ "Zítra 8:00 - 17:00" 🚗';

  // Initialize messages from localStorage
  const [messages, setMessages] = useState(() => {
    const storedMessages = localStorage.getItem('chatMessages');
    return storedMessages
      ? JSON.parse(storedMessages)
      : [{ type: 'bot', content: initialBotMessage }];
  });
  const [inputMessage, setInputMessage] = useState('');
  const [isBotTyping, setIsBotTyping] = useState(false);
  const [canSendMessage, setCanSendMessage] = useState(true);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Save messages to localStorage whenever messages change
  useEffect(() => {
    const lastMessages = messages.slice(-50); // Keep only the last 50 messages
    localStorage.setItem('chatMessages', JSON.stringify(lastMessages));
  }, [messages]);

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      // Optimize scroll to run after DOM updates
      setTimeout(() => {
        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
      }, 100);
    }
  }, [messages]);

  const handleSendMessage = async () => {
    const trimmedMessage = inputMessage.trim();
    if (trimmedMessage === '') return;

    setInputMessage('');
    setIsBotTyping(true);
    setCanSendMessage(false);

    // Update messages with user input
    setMessages((prevMessages) => [
      ...prevMessages,
      { type: 'user', content: trimmedMessage },
    ]);

    // Keep focus on the input field
    if (inputRef.current) {
      inputRef.current.focus();
    }

    try {
      const apiUrl =
        process.env.REACT_APP_API_SERVER_URL || 'https://default-api-url.com';
      const response = await axios.post(
        `${apiUrl}/parking`,
        { input: trimmedMessage },
        { withCredentials: true }
      );

      const botReply = response.data.reply;
      setMessages((prevMessages) => [
        ...prevMessages,
        { type: 'bot', content: botReply },
      ]);
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages((prevMessages) => [
        ...prevMessages,
        {
          type: 'bot',
          content:
            'Omlouváme se, došlo k chybě při zpracování vašeho požadavku.',
        },
      ]);
    } finally {
      setIsBotTyping(false);
      setCanSendMessage(true);
    }
  };

  const handleInputKeyDown = (e) => {
    if (e.key === 'Enter' && canSendMessage && inputMessage.trim() !== '') {
      e.preventDefault(); // Prevents adding a new line
      handleSendMessage();
    }
  };

  return (
    <div className="App">
      <div className="chat-container">
        <div className="chat-header">
          <h2>Sdílení Parkování</h2>
        </div>
        <div className="chat-messages">
          <div className="messages-wrapper">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`message ${
                  message.type === 'user' ? 'user-message' : 'bot-message'
                }`}
              >
                <div className="message-content">
                  <ReactMarkdown>{message.content}</ReactMarkdown>
                </div>
              </div>
            ))}
            {isBotTyping && (
              <div className="message bot-message typing">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>
        <div className="chat-input">
          <input
            ref={inputRef}
            type="text"
            placeholder="Napsat zprávu..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyDown={handleInputKeyDown}
            autoComplete="off"
            aria-label="Napsat zprávu"
          />
          <button
            onClick={handleSendMessage}
            disabled={!canSendMessage || inputMessage.trim() === ''}
          >
            <svg viewBox="0 0 24 24" className="send-icon">
              <path d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.test.js
--------------------------------------------------
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/config.js
--------------------------------------------------
import React from 'react';
import CustomChat from './CustomChat';
import './index.css'; // Make sure to import the CSS file

function App() {
  return (
    <div className="App">
      <div className="chat-container">
        <CustomChat />
      </div>
    </div>
  );
}

export default App;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/index.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'; // Updated import

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <Routes> {/* Updated from Switch to Routes */}
        <Route exact path="/" element={<App />} /> {/* Updated from component to element */}
      </Routes>
    </Router>
  </React.StrictMode>,
  document.getElementById('root')
);

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/reportWebVitals.js
--------------------------------------------------
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/setupTests.js
--------------------------------------------------
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/webpack.config.js
--------------------------------------------------
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

module.exports = (env) => {
    return {
        entry: './src/index.js',
        output: {
            filename: 'bundle.js',
            path: path.resolve(__dirname, 'dist'),
            publicPath: '/'
        },
        module: {
            rules: [
                {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                    }
                },
                {
                    test: /\.css$/,
                    use: ['style-loader', 'css-loader']
                }
            ]
        },
        resolve: {
            extensions: ['.js', '.jsx']
        },
        plugins: [
            new CleanWebpackPlugin(),
            new HtmlWebpackPlugin({
                template: './public/index.html',
                filename: 'index.html'
            })
        ],
        devServer: {
            historyApiFallback: true,
            static: './', // Updated from contentBase to static
            hot: true,
            port: env.PORT || 4001,
            proxy: [
                {
                  context: ["/api"],  
                  target:
                    process.env.services__reservationserver__http__0,
                  pathRewrite: { "^/api": "" },
                  secure: false,
                },
              ],
        }
    }
};

