--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.css
--------------------------------------------------
.App {
  text-align: center;
  width: 100%;
  height: 100%;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}


--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/CustomChat.css
--------------------------------------------------
:root {
  --orange: #ff4f40;
  --indigo: #635dff;
  --white: #fff;
  --light-aluminium: #eaecee;
  --aluminium: #bdc4cf;
  --dark-aluminium: #2a2e35;
  --black: #000000;
  --yellow: #ebca40;
  --mandarine: #ff7f38;
  --pink: #ff44dd;
  --blue: #3885ff;
  --aqua: #3ec6eb;
  --emerald: #1bc99f;
  --yellow-mandarine-gradient: linear-gradient(153.07deg, var(--yellow) -2.47%, var(--mandarine) 102.78%);
  --mandarine-orange-gradient: linear-gradient(153.07deg, var(--mandarine) -2.47%, var(--orange) 102.78%);
  --pink-yellow-gradient: linear-gradient(153.07deg, var(--pink) -2.47%, var(--yellow) 102.78%);
  --pink-indigo-gradient: linear-gradient(153.07deg, var(--pink) -2.47%, var(--indigo) 102.78%);
  --indigo-aqua-gradient: linear-gradient(153.07deg, var(--indigo) -2.47%, var(--aqua) 102.78%);
  --blue-aqua-gradient: linear-gradient(153.07deg, var(--blue) -2.47%, var(--aqua) 102.78%);
  --aqua-emerald-gradient: linear-gradient(153.07deg, var(--aqua) -2.47%, var(--emerald) 102.78%);
  --emerald-yellow-gradient: linear-gradient(153.07deg, var(--emerald) -2.47%, var(--yellow) 102.78%);
  --font-primary: "Inter", sans-serif;
  --font-secondary: "Space Grotesk", sans-serif;
  --font-mono: "Fira Code", monospace;
  font-family: "Space Grotesk", sans-serif;
}

.chat-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: white;
  z-index: 1000;
}

.rcw-conversation-container {
  width: 100% !important;
  height: 100% !important;
  max-width: none !important;
  max-height: none !important;
  border-radius: 0 !important;
  overflow: hidden;
}

.rcw-header {
  width: 100% !important;
  background-color: black !important; /* Change header background color to black */
  padding: 10px !important; /* Ensure there is padding for better visibility */
  text-align: center; /* Center the title */
}

.rcw-close-button {
  display: none !important; /* Hide the close button */
}

.rcw-messages-container,
.rcw-new-message {
  width: 100% !important;
  height: auto !important;
}

.rcw-messages-container {
  height: calc(100% - 120px) !important;
  background: var(--pink-yellow-gradient); /* Applying gradient background */
}

@media only screen and (max-width: 640px) {
  .rcw-header {
    font-size: 16px !important; /* Adjust font size for mobile */
    padding: 15px !important; /* Adjust padding for mobile */
  }
}

.page-layout__content {
  flex: 1 1;
  flex-basis: auto;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  margin-top: 8rem;
  max-width: 120rem;
  width: 100%;
}

* {
  box-sizing: border-box;
}

body, button, input, select, textarea {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  background-color: var(--black);
  color: var(--white);
  font-family: var(--font-primary);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-y: scroll;
}

html {
  font-size: 15px;
  text-rendering: geometricPrecision;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.rcw-response {
  font-size: 15px;
  color: var(--black);
}

.rcw-message-text {
  font-size: 15px;
  color: var(--black);
  font-family: "Space Grotesk", sans-serif;
}

.rcw-input {
  font-size: 15px;
  font-family: "Space Grotesk", sans-serif;
}

.rcw-sender {
  color: #000000;
  font-family: "Space Grotesk", sans-serif;
}

.rcw-picker-btn {
  display: none !important; /* Hide the close button */
  font-family: "Space Grotesk", sans-serif;
}


@media only screen and (min-width: 640px) {
  .rcw-header {
    font-size: 16px !important; /* Adjust font size for mobile */
    padding: 15px !important; /* Adjust padding for mobile */
  }

  .rcw-widget-container{
    /* width: 80%;
    max-width: 800px;
    height: 80%;
    max-height: 900px; */
    position: relative;
  }


  .rcw-conversation-container active{
    width: 100px;
    height: 100px;
  }

  
  .rcw-launcher {
    display: none !important;
  }
}
--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/index.css
--------------------------------------------------
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');

body, html {
  height: 100%;
  margin: 0;
  background-color: #f0f2f5;
}

#root {
  height: 100%;
  width: 100%;
}

.App {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chat-container {
  width: 100%;
  height: 100%;
  font-family: Roboto, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
}

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/OwnerPage.css
--------------------------------------------------
.owner-page {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.spot-card {
  background: white;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgb(0 0 0 / 10%);
}

.availabilities {
  margin-top: 10px;
}

.availability {
  background: #f9f9f9;
  padding: 10px;
  margin-bottom: 5px;
  border-radius: 4px;
}

.new-availability {
  margin-top: 20px;
}

.new-availability label {
  display: block;
  margin-bottom: 10px;
}

.new-availability input, .new-availability select {
  margin-left: 10px;
}

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.js
--------------------------------------------------
import React from 'react';
import CustomChat from './CustomChat';
import './index.css'; // Make sure to import the CSS file

function App() {
  return (
    <div className="App">
      <div className="chat-container">
        <CustomChat />
      </div>
    </div>
  );
}

export default App;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.test.js
--------------------------------------------------
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/config.js
--------------------------------------------------
import React from 'react';
import CustomChat from './CustomChat';
import './index.css'; // Make sure to import the CSS file

function App() {
  return (
    <div className="App">
      <div className="chat-container">
        <CustomChat />
      </div>
    </div>
  );
}

export default App;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/CustomChat.js
--------------------------------------------------
import React, { useState, useEffect } from 'react';
import { Widget, addResponseMessage, addUserMessage, toggleWidget, renderCustomComponent } from 'react-chat-widget';
import axios from 'axios';
import Cookies from 'js-cookie';
import 'react-chat-widget/lib/styles.css';
import './CustomChat.css';

const apiServerUrl = process.env.REACT_APP_API_SERVER_URL;
console.log('API Server URL:', process.env.REACT_APP_API_SERVER_URL);

const CustomChat = () => {
  const [isBotTyping, setIsBotTyping] = useState(false);
  const [canSendMessage, setCanSendMessage] = useState(true);

  // Load messages from cookies
  useEffect(() => {
    const storedMessages = Cookies.get('chatMessages');
    if (storedMessages) {
      JSON.parse(storedMessages).forEach(message => {
        if (message.type === 'user') {
          addUserMessage(message.content);
        } else {
          addResponseMessage(message.content);
        }
      });
    } else {
      // Display initial message only if there are no stored messages
      if (!Cookies.get('initialMessageShown')) {
        addResponseMessage('Sdílení a rezervace parkovacích míst ve Velvarii! 🚗 Stačí napsat na kdy chcete místo rezervovat.');
        // Set a cookie to indicate that the initial message has been shown
        Cookies.set('initialMessageShown', 'true', { expires: 1 / 36 }); // 40 minutes
      }
    }
    toggleWidget(); // Open the chat widget
  }, []);

  // Save messages to cookies
  const saveMessagesToCookies = (messages) => {
    // Keep only the last 20 messages
    const lastMessages = messages.slice(-20);
    Cookies.set('chatMessages', JSON.stringify(lastMessages), { expires: 1 / 36 }); // 40 minutes
  };

  const handleNewUserMessage = async (newMessage) => {
    setIsBotTyping(true);
    setCanSendMessage(false);

    // Add user message to cookies
    const currentMessages = Cookies.get('chatMessages') ? JSON.parse(Cookies.get('chatMessages')) : [];
    currentMessages.push({ type: 'user', content: newMessage });
    saveMessagesToCookies(currentMessages);

    // Send the message to the backend
    try {
      const response = await axios.post(`${apiServerUrl}/parking`, {
        input: newMessage,
      }, {
        withCredentials: true,
      });

      const botReply = response.data.reply;
      addResponseMessage(botReply);

      // Add bot message to cookies
      currentMessages.push({ type: 'bot', content: botReply });
      saveMessagesToCookies(currentMessages);
    } catch (error) {
      console.error('Error sending message:', error);
      addResponseMessage('Sorry, something went wrong with your request.');
    } finally {
      setIsBotTyping(false);
      setCanSendMessage(true);
    }
  };

  const CustomInput = ({ handleNewUserMessage }) => {
    const [message, setMessage] = useState('');

    const handleSubmit = (event) => {
      event.preventDefault();
      if (message.trim()) {
        handleNewUserMessage(message);
        setMessage('');
      }
    };

    return (
      <form onSubmit={handleSubmit} className="rcw-new-message">
        <input
          className="rcw-input"
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Type a message..."
          disabled={!canSendMessage}
        />
        <button type="submit" className="rcw-send" disabled={!canSendMessage}>
          Send
        </button>
      </form>
    );
  };

  return (
    <div className="chat-container">
      <Widget
        handleNewUserMessage={handleNewUserMessage}
        title="Sdílení parkování"
        subtitle="Příklad: Chci rezerovat parkovací místo na zítřek od 8:00 do 15:00"
        customLauncher={() => {}}
        customStyles={{
          launcher: {
            display: 'none',
          }
        }}
        renderCustomComponent={() => renderCustomComponent(CustomInput, { handleNewUserMessage })}
      />
    </div>
  );
};

export default CustomChat;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/index.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import OwnerPage from './OwnerPage';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'; // Updated import

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <Routes> {/* Updated from Switch to Routes */}
        <Route exact path="/" element={<App />} /> {/* Updated from component to element */}
        <Route path="/owner" element={<OwnerPage />} /> {/* Updated from component to element */}
      </Routes>
    </Router>
  </React.StrictMode>,
  document.getElementById('root')
);

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/OwnerPage.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/OwnerPage.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './OwnerPage.css';

const OwnerPage = () => {
  const [spots, setSpots] = useState([]);
  const [newAvailability, setNewAvailability] = useState({ dayOfWeek: '', startTime: '', endTime: '', isRecurring: false });

  useEffect(() => {
    // Fetch parking spots for the owner
    axios.get('http://localhost:5239/owner/spots', { withCredentials: true })
      .then(response => setSpots(response.data))
      .catch(error => console.error('Error fetching spots:', error));
  }, []);

  const handleAddAvailability = (spotId) => {
    axios.post(`http://localhost:5239/owner/spots/${spotId}/availability`, newAvailability, { withCredentials: true })
      .then(response => {
        setSpots(spots.map(spot => spot.parkingSpotId === spotId ? { ...spot, availabilities: response.data.availabilities } : spot));
      })
      .catch(error => console.error('Error adding availability:', error));
  };

  const handleInputChange = (event) => {
    const { name, value, type, checked } = event.target;
    setNewAvailability(prevState => ({ ...prevState, [name]: type === 'checkbox' ? checked : value }));
  };

  return (
    <div className="owner-page">
      <h1>Manage My Parking Spots</h1>
      {spots.map(spot => (
        <div key={spot.parkingSpotId} className="spot-card">
          <h2>{spot.name}</h2>
          <p>Price per hour: {spot.pricePerHour}</p>
          <div className="availabilities">
            {spot.availabilities.map(avail => (
              <div key={avail.availabilityId} className="availability">
                <p>{avail.dayOfWeek || avail.specificDate}: {avail.startTime} - {avail.endTime}</p>
                <p>Recurring: {avail.isRecurring ? 'Yes' : 'No'}</p>
              </div>
            ))}
          </div>
          <div className="new-availability">
            <h3>Add New Availability</h3>
            <label>
              Day of Week:
              <select name="dayOfWeek" value={newAvailability.dayOfWeek} onChange={handleInputChange}>
                <option value="">Select</option>
                {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
                  <option key={day} value={day}>{day}</option>
                ))}
              </select>
            </label>
            <label>
              Start Time:
              <input type="time" name="startTime" value={newAvailability.startTime} onChange={handleInputChange} />
            </label>
            <label>
              End Time:
              <input type="time" name="endTime" value={newAvailability.endTime} onChange={handleInputChange} />
            </label>
            <label>
              Recurring:
              <input type="checkbox" name="isRecurring" checked={newAvailability.isRecurring} onChange={handleInputChange} />
            </label>
            <button onClick={() => handleAddAvailability(spot.parkingSpotId)}>Add Availability</button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default OwnerPage;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/reportWebVitals.js
--------------------------------------------------
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/setupTests.js
--------------------------------------------------
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/webpack.config.js
--------------------------------------------------
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

module.exports = (env) => {
    return {
        entry: './src/index.js',
        output: {
            filename: 'bundle.js',
            path: path.resolve(__dirname, 'dist'),
            publicPath: '/'
        },
        module: {
            rules: [
                {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                    }
                },
                {
                    test: /\.css$/,
                    use: ['style-loader', 'css-loader']
                }
            ]
        },
        resolve: {
            extensions: ['.js', '.jsx']
        },
        plugins: [
            new CleanWebpackPlugin(),
            new HtmlWebpackPlugin({
                template: './public/index.html',
                filename: 'index.html'
            })
        ],
        devServer: {
            historyApiFallback: true,
            static: './', // Updated from contentBase to static
            hot: true,
            port: env.PORT || 4001,
            proxy: [
                {
                  context: ["/api"],  
                  target:
                    process.env.services__reservationserver__http__0,
                  pathRewrite: { "^/api": "" },
                  secure: false,
                },
              ],
        }
    }
};

